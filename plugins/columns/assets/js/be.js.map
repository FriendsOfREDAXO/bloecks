{"version":3,"sources":["be/scripts.js"],"names":["bloecks","addPlugin","init","_this","this","$","each","i","slicewrapper","sortable","ev","find","length","addClass","addResizables","getGrid","Math","ceil","outerWidth","last","outerHeight","el","handles","getItemData","push","join","resizable","containment","document","body","stop","event","ui","grid","x","round","size","width","y","height","columns","this_id","getSliceId","css","console","log","url","window","location","href","replace","indexOf","executePjax","resize","floor","updateOnResize","item","type","ret","attr","split","parseInt","max","isNaN","min","sizes","rows","types","options"],"mappings":"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","file":"be.js","sourcesContent":["bloecks.addPlugin(\n    'columns',\n    {\n        init : function()\n        {\n            var _this = this;\n            // for each rex-slices container\n            $('.rex-slices').each(function(i, slicewrapper)\n            {\n                // remove any sortable\n                try {\n                    $(slicewrapper).sortable('destroy');\n                } catch(ev) { }\n\n                if(!$(slicewrapper).find('.rex-slice form').length)\n                {\n                    // only add sortables if the page is not in EDIT mode\n                    _this.addResizables(slicewrapper);\n                }\n                else\n                {\n                    $(slicewrapper).addClass('is--editing');\n                }\n            });\n        },\n\n        getGrid : function(slicewrapper)\n        {\n            return [Math.ceil($(slicewrapper).outerWidth() / 4), Math.ceil($(slicewrapper).find('.rex-slice-select').last().outerHeight())];\n        },\n\n        addResizables : function(slicewrapper)\n        {\n            var _this = this;\n\n            $(slicewrapper).find('>.rex-slice.rex-slice-output').each(function(i, el){\n                var handles = [];\n\n                if(_this.getItemData(el, 'columns')['min'] != _this.getItemData(el, 'columns')['max'])\n                {\n                    handles.push('e');\n                }\n                if(_this.getItemData(el, 'rows')['min'] != _this.getItemData(el, 'rows')['max'])\n                {\n                    handles.push('s');\n                }\n                handles = handles.join(', ');\n\n                if(handles)\n                {\n                    $(el).resizable({\n                        containment: document.body,\n                        handles : handles,\n                        stop: function(event, ui)\n                        {\n                            var grid = $(this).resizable('option', 'grid'),\n                                x = Math.round(ui.size.width / grid[0]),\n                                y = Math.round(ui.size.height / grid[1]),\n                                columns = _this.getItemData(this, 'columns')\n                                this_id = bloecks.getSliceId(this);\n\n                            $(this).css({\n                                 width: (Math.round( (x / columns.grid) * 10000) / 100) + '%'\n                            });\n\n\n                            if(this_id !== null)\n                            {\n                                console.log('Update format of ' + this_id);\n                                var url = window.location.href.replace(/page=([^&]+)/,'page=bloecks/columns/resize').replace(/(&|\\?)resize[(\\d+)][x]=(\\d+)/g,'').replace(/(&|\\?)resize[(\\d+)][y]=(\\d+)/g,'');\n                                url+= (url.indexOf('?') > -1 ? '&' : '?') + 'resize[' + this_id + '][x]=' + x + '&resize[' + this_id + '][y]=' + y;\n\n                                bloecks.executePjax(url);\n                            }\n                        },\n\n                        resize : function( event, ui ) {\n                            var grid = $(this).resizable('option', 'grid');\n                            ui.size.width = Math.floor( ui.size.width / grid[0] ) * grid[0];\n                            ui.size.height = Math.floor( ui.size.height / grid[1] ) * grid[1];\n                        }\n                    });\n                }\n            });\n\n            this.updateOnResize(slicewrapper);\n        },\n\n        getItemData : function(item, type)\n        {\n            var ret = {},\n                attr = ($(item).attr('data-bloecks-' + type) || '').split(',');\n\n            ret.grid = typeof(attr[1]) != 'undefined' ? parseInt(attr[1]) : 1;\n            ret.grid = Math.max(1, isNaN(ret.grid) ? 1 : ret.grid);\n\n            ret.min = typeof(attr[2]) != 'undefined' ? parseInt(attr[2]) : 1;\n            ret.min = Math.max(1, isNaN(ret.min) ? 1 : ret.min);\n            ret.min = Math.min(ret.grid, ret.min);\n\n            ret.max = typeof(attr[3]) != 'undefined' ? parseInt(attr[3]) : 1;\n            ret.max = Math.max(ret.min, isNaN(ret.max) ? ret.min : ret.max);\n            ret.max = Math.min(ret.grid, ret.max);\n\n            ret.size = typeof(attr[0]) != 'undefined' ? parseInt(attr[0]) : ret.min;\n            ret.size = Math.max(1, isNaN(ret.size) ? ret.min : ret.size);\n            ret.size = Math.min(ret.size, ret.max);\n\n            return ret;\n        },\n\n        updateOnResize : function(slicewrapper)\n        {\n            var _this = this,\n                sizes = {\n                    rows : $(slicewrapper).find('.rex-slice-select').last().outerHeight(),\n                    columns : $(slicewrapper).outerWidth()\n                };\n\n            $(slicewrapper).find('>.rex-slice.rex-slice-output.ui-resizable').each(function(i, el) {\n                var types = {'rows' : {}, 'columns' : {} }, options = {};\n\n                for(var type in types)\n                {\n                    var attr = ($(el).attr('data-bloecks-' + type) || '').split(',');\n\n                    types[type] = _this.getItemData(el, type);\n\n                    types[type].grid = sizes[type] / types[type].grid;\n                    types[type].min = Math.ceil(types[type].grid * types[type].min);\n                    types[type].max = Math.ceil(types[type].grid * types[type].max);\n                    types[type].grid = Math.floor(types[type].grid);\n\n                    options['min' + (type == 'rows' ? 'Height' : 'Width')] = types[type].min;\n                    options['max' + (type == 'rows' ? 'Height' : 'Width')] = types[type].max;\n                }\n\n                options.grid = [types.columns.grid, types.rows.grid];\n\n                $(el).resizable('option', options);\n            });\n        }\n    }\n);\n"]}